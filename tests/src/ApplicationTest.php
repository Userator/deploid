<?php

namespace Deploid;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-10-25 at 19:53:51.
 */
class ApplicationTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Application
	 */
	protected $object;

	/**
	 * @var string
	 */
	protected $path;

	protected function setUp() {
		$this->object = new Application();
		$this->path = sys_get_temp_dir() . DIRECTORY_SEPARATOR . strtolower(__NAMESPACE__) . DIRECTORY_SEPARATOR . uniqid();
	}

	protected function tearDown() {
		$this->object = null;
		$this->path = null;
	}

	/**
	 * @before
	 * @param string $path
	 */
	protected function resetWorkDir() {
		$this->removeWorkDir($this->path);
		$this->createWorkDir($this->path);
	}

	/**
	 * @param string $path
	 */
	private function createWorkDir($path) {
		$process = new \Symfony\Component\Process\Process('mkdir ' . $path);
		$process->run();
	}

	/**
	 * @param string $path
	 */
	private function removeWorkDir($path) {
		$process = new \Symfony\Component\Process\Process('rm -rf ' . $path);
		$process->run();
	}

	/**
	 * @covers \Deploid\Application::deploidStructureValidate
	 */
	public function testDeploidStructureValidate() {
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers \Deploid\Application::deploidStructureInit
	 */
	public function testDeploidStructureInit() {
		$releasesDir = 'releases';
		$releaseName = date($this->object->getReleaseNameFormat());
		$sharedDir = 'shared';
		$deploidFile = 'deploid.log';
		$currentLink = 'current';

		$structure = [];
		$structure['dirs'][] = $releasesDir;
		$structure['dirs'][] = $releasesDir . DIRECTORY_SEPARATOR . $releaseName;
		$structure['dirs'][] = $sharedDir;
		$structure['files'][] = $deploidFile;
		$structure['links'][] = $currentLink . ':' . $releasesDir . DIRECTORY_SEPARATOR . $releaseName;
		$this->object->setStructure($structure);

		$payload = $this->object->deploidStructureInit($this->path);

		$structureScaned = $this->object->scanStructure($this->path);

		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $releasesDir);
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseName);
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $sharedDir);
		$this->assertFileExists($this->path . DIRECTORY_SEPARATOR . $deploidFile);
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $currentLink);
		$this->assertTrue(is_link($this->path . DIRECTORY_SEPARATOR . $currentLink));
		$this->assertEquals(realpath($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseName), realpath(readlink($this->path . DIRECTORY_SEPARATOR . $currentLink)));
		$this->assertEquals($this->object->sortStructure($structure), $this->object->sortStructure($structureScaned));

		return $payload;
	}

	/**
	 * @covers \Deploid\Application::deploidStructureClean
	 */
	public function testDeploidStructureClean() {
		$releasesDir = 'releases';
		$sharedDir = 'shared';
		$needlessDir = 'needless';
		$deploidFile = 'deploid.log';
		$needlessFile = 'needless.log';
		$currentLink = 'current';

		$structureClean = [];
		$structureClean['dirs'][] = $releasesDir;
		$structureClean['dirs'][] = $sharedDir;
		$structureClean['files'][] = $deploidFile;
		$structureClean['links'][] = $currentLink . ':' . $releasesDir;
		$this->object->setStructure($structureClean);

		$structureDirty = [];
		$structureDirty['dirs'][] = $releasesDir;
		$structureDirty['dirs'][] = $sharedDir;
		$structureDirty['dirs'][] = $needlessDir;
		$structureDirty['dirs'][] = $needlessDir . DIRECTORY_SEPARATOR . 'testneed';
		$structureDirty['files'][] = $deploidFile;
		$structureDirty['files'][] = $needlessFile;
		$structureDirty['files'][] = $needlessDir . DIRECTORY_SEPARATOR . 'testneed' . DIRECTORY_SEPARATOR . 'ase.txt';
		$structureDirty['files'][] = $needlessDir . DIRECTORY_SEPARATOR . 'texts' . DIRECTORY_SEPARATOR . 'text.txt';
		$structureDirty['links'][] = $currentLink . ':' . $releasesDir;
		$structureDirty['links'][] = 'anotherdir/xlink' . ':' . 'dirxlink/xfolder';
		$structureDirty['links'][] = 'another/folder/xlinkxx' . ':' . 'dirxlixnk/xfolderxx';
		$this->object->makeStructure($this->path, $structureDirty);

		$payload = $this->object->deploidStructureClean($this->path);

		$this->assertEquals(0, $payload->getCode());
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $releasesDir);
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $sharedDir);
		$this->assertDirectoryNotExists($this->path . DIRECTORY_SEPARATOR . $needlessDir);
		$this->assertFileExists($this->path . DIRECTORY_SEPARATOR . $deploidFile);
		$this->assertFileNotExists($this->path . DIRECTORY_SEPARATOR . $needlessFile);
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $currentLink);
		$this->assertTrue(is_link($this->path . DIRECTORY_SEPARATOR . $currentLink));
		$this->assertEquals(realpath($this->path . DIRECTORY_SEPARATOR . $releasesDir), realpath(readlink($this->path . DIRECTORY_SEPARATOR . $currentLink)));

		return $payload;
	}

	/**
	 * @covers \Deploid\Application::deploidReleaseExist
	 */
	public function testDeploidReleaseExist() {
		$releasesDir = 'releases';
		$releaseNameExist = date($this->object->getReleaseNameFormat());
		$releaseNameNotExist = date($this->object->getReleaseNameFormat(), time() + 3600);

		$structure = [];
		$structure['dirs'][] = $releasesDir;
		$structure['dirs'][] = $releasesDir . DIRECTORY_SEPARATOR . $releaseNameExist;
		$this->object->makeStructure($this->path, $structure);

		$payloadSuccess = $this->object->deploidReleaseExist($releaseNameExist, $this->path);
		$payloadFail = $this->object->deploidReleaseExist($releaseNameNotExist, $this->path);

		$this->assertEquals(0, $payloadSuccess->getCode());
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseNameExist);

		$this->assertNotEquals(0, $payloadFail->getCode());
		$this->assertDirectoryNotExists($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseNameNotExist);
	}

	/**
	 * @covers \Deploid\Application::deploidReleaseCreate
	 */
	public function testDeploidReleaseCreate() {
		$releasesDir = 'releases';
		$releaseName = date($this->object->getReleaseNameFormat());

		$structure = [];
		$structure['dirs'][] = $releasesDir;
		$this->object->makeStructure($this->path, $structure);

		$payload = $this->object->deploidReleaseCreate($releaseName, $this->path);

		$this->assertEquals(0, $payload->getCode());
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseName);

		return $payload;
	}

	/**
	 * @covers \Deploid\Application::deploidReleaseRemove
	 */
	public function testDeploidReleaseRemove() {
		$releasesDir = 'releases';
		$releaseName = date($this->object->getReleaseNameFormat());

		$structure = [];
		$structure['dirs'][] = $releasesDir;
		$structure['dirs'][] = $releasesDir . DIRECTORY_SEPARATOR . $releaseName;
		$this->object->makeStructure($this->path, $structure);

		$payload = $this->object->deploidReleaseRemove($releaseName, $this->path);

		$this->assertEquals(0, $payload->getCode());
		$this->assertDirectoryNotExists($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseName);

		return $payload;
	}

	/**
	 * @covers \Deploid\Application::deploidReleaseList
	 */
	public function testDeploidReleaseList() {
		$releasesDir = 'releases';
		$releaseName = date($this->object->getReleaseNameFormat());

		$structure = [];
		$structure['dirs'][] = $releasesDir;
		$structure['dirs'][] = $releasesDir . DIRECTORY_SEPARATOR . $releaseName;
		$this->object->makeStructure($this->path, $structure);

		$payload = $this->object->deploidReleaseList($this->path);

		$this->assertEquals(0, $payload->getCode());
		$this->assertEquals([$releaseName], $payload->getMessage());

		return $payload;
	}

	/**
	 * @covers \Deploid\Application::deploidReleaseLatest
	 */
	public function testDeploidReleaseLatest() {
		$releasesDir = 'releases';
		$releaseNameFirst = date($this->object->getReleaseNameFormat());
		$releaseNameLast = date($this->object->getReleaseNameFormat(), time() + 3600);

		$structure = [];
		$structure['dirs'][] = $releasesDir;
		$structure['dirs'][] = $releasesDir . DIRECTORY_SEPARATOR . $releaseNameFirst;
		$structure['dirs'][] = $releasesDir . DIRECTORY_SEPARATOR . $releaseNameLast;
		$this->object->makeStructure($this->path, $structure);

		$payload = $this->object->deploidReleaseLatest($this->path);

		$this->assertEquals(0, $payload->getCode());
		$this->assertEquals($releaseNameLast, $payload->getMessage());

		return $payload;
	}

	/**
	 * @covers \Deploid\Application::deploidReleaseCurrent
	 */
	public function testDeploidReleaseCurrent() {
		$releasesDir = 'releases';
		$releaseName = date($this->object->getReleaseNameFormat());
		$currentLink = 'current';

		$structure = [];
		$structure['dirs'][] = $releasesDir;
		$structure['dirs'][] = $releasesDir . DIRECTORY_SEPARATOR . $releaseName;
		$structure['links'][] = $currentLink . ':' . $releasesDir . DIRECTORY_SEPARATOR . $releaseName;

		$this->object->makeStructure($this->path, $structure);

		$payload = $this->object->deploidReleaseCurrent($this->path);

		$this->assertEquals(0, $payload->getCode());
		$this->assertEquals($releaseName, $payload->getMessage());
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $currentLink);
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseName);
		$this->assertTrue(is_link($this->path . DIRECTORY_SEPARATOR . $currentLink));
		$this->assertEquals(realpath($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseName), realpath(readlink($this->path . DIRECTORY_SEPARATOR . $currentLink)));

		return $payload;
	}

	/**
	 * @covers \Deploid\Application::deploidReleaseSetup
	 */
	public function testDeploidReleaseSetup() {
		$releasesDir = 'releases';
		$releaseNameFirst = date($this->object->getReleaseNameFormat());
		$releaseNameLast = date($this->object->getReleaseNameFormat(), time() + 3600);
		$currentLink = 'current';


		$structure = [];
		$structure['dirs'][] = $releasesDir;
		$structure['dirs'][] = $releasesDir . DIRECTORY_SEPARATOR . $releaseNameFirst;
		$structure['dirs'][] = $releasesDir . DIRECTORY_SEPARATOR . $releaseNameLast;
		$structure['links'][] = $currentLink . ':' . $releasesDir . DIRECTORY_SEPARATOR . $releaseNameFirst;
		$this->object->makeStructure($this->path, $structure);

		$payload = $this->object->deploidReleaseSetup($releaseNameLast, $this->path);

		$this->assertEquals(0, $payload->getCode());
		$this->assertContains($releaseNameLast, $payload->getMessage());
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $currentLink);
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseNameLast);
		$this->assertTrue(is_link($this->path . DIRECTORY_SEPARATOR . $currentLink));
		$this->assertEquals(realpath($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseNameLast), realpath(readlink($this->path . DIRECTORY_SEPARATOR . $currentLink)));

		return $payload;
	}

	/**
	 * @covers \Deploid\Application::deploidReleaseRotate
	 */
	public function testDeploidReleaseRotate() {
		$releasesDir = 'releases';
		$releaseNameFirst = date($this->object->getReleaseNameFormat());
		$releaseNameLast = date($this->object->getReleaseNameFormat(), time() + 3600);
		$quantity = 1;

		$structure = [];
		$structure['dirs'][] = $releasesDir;
		$structure['dirs'][] = $releasesDir . DIRECTORY_SEPARATOR . $releaseNameFirst;
		$structure['dirs'][] = $releasesDir . DIRECTORY_SEPARATOR . $releaseNameLast;
		$this->object->makeStructure($this->path, $structure);

		$payload = $this->object->deploidReleaseRotate($quantity, $this->path);

		$this->assertEquals(0, $payload->getCode());
		$this->assertDirectoryNotExists($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseNameFirst);
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseNameLast);
		$this->assertCount($quantity, glob($this->path . DIRECTORY_SEPARATOR . $releasesDir));

		return $payload;
	}

	/**
	 * @covers \Deploid\Application::absolutePath
	 */
	public function testAbsolutePath() {
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers \Deploid\Application::makeStructure
	 */
	public function testMakeStructure() {
		$releasesDir = 'releases';
		$releaseName = date($this->object->getReleaseNameFormat());
		$logsDir = 'logs';
		$historyFile = 'history.txt';
		$deploidFile = 'deploid.log';
		$currentLink = 'current';

		$structure = [];
		$structure['dirs'][] = $releasesDir;
		$structure['dirs'][] = $releasesDir . DIRECTORY_SEPARATOR . $releaseName;
		$structure['dirs'][] = $logsDir;
		$structure['files'][] = $historyFile;
		$structure['files'][] = $logsDir . DIRECTORY_SEPARATOR . $deploidFile;
		$structure['links'][] = $currentLink . ':' . $releasesDir . DIRECTORY_SEPARATOR . $releaseName;

		$this->object->makeStructure($this->path, $structure);

		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $releasesDir);
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseName);
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $logsDir);
		$this->assertFileExists($this->path . DIRECTORY_SEPARATOR . $historyFile);
		$this->assertFileExists($this->path . DIRECTORY_SEPARATOR . $logsDir . DIRECTORY_SEPARATOR . $deploidFile);
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . $currentLink);
		$this->assertTrue(is_link($this->path . DIRECTORY_SEPARATOR . $currentLink));
		$this->assertEquals(realpath($this->path . DIRECTORY_SEPARATOR . $releasesDir . DIRECTORY_SEPARATOR . $releaseName), realpath(readlink($this->path . DIRECTORY_SEPARATOR . $currentLink)));
	}

}