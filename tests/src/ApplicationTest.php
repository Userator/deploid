<?php

namespace Deploid;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-10-25 at 19:53:51.
 */
class ApplicationTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Application
	 */
	protected $object;

	/**
	 * @var string
	 */
	protected $path;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new Application;
		$this->path = sys_get_temp_dir() . DIRECTORY_SEPARATOR . strtolower(__NAMESPACE__);
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		$process = new \Symfony\Component\Process\Process('rm -rf ' . $this->path);
		$process->run();
	}

	/**
	 * @covers Deploid\Application::getLogger
	 * @todo   Implement testGetLogger().
	 */
	public function testGetLogger() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Application::setLogger
	 * @todo   Implement testSetLogger().
	 */
	public function testSetLogger() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Application::deploidStructureValidate
	 * @depends testDeploidStructureInit
	 */
	public function testDeploidStructureValidate(Payload $payloadInit) {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Application::deploidStructureInit
	 */
	public function testDeploidStructureInit() {
		$payload = $this->object->deploidStructureInit($this->path);
		$this->assertEquals(0, $payload->getCode());
		$this->assertDirectoryExists($this->path);
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . 'releases');
		$this->assertDirectoryExists($this->path . DIRECTORY_SEPARATOR . 'shared');
		$this->assertFileExists($this->path . DIRECTORY_SEPARATOR . 'deploid.log');
		return $payload;
	}

	/**
	 * @covers Deploid\Application::deploidStructureClean
	 * @depends testDeploidStructureInit
	 */
	public function testDeploidStructureClean(Payload $payloadInit) {
		$needlessDir = $this->path . DIRECTORY_SEPARATOR . 'needless';
		$isMkdir = mkdir($needlessDir);

		$needlessFile = $this->path . DIRECTORY_SEPARATOR . 'needless.log';
		$isTouch = touch($needlessFile);

		$pathsBad = glob($this->path . DIRECTORY_SEPARATOR . '*');
		$payload = $this->object->deploidStructureClean($this->path);
		$pathsGood = glob($this->path . DIRECTORY_SEPARATOR . '*');

		$this->assertNotFalse($isMkdir);
		$this->assertNotFalse($isTouch);
		$this->assertNotFalse($pathsBad);
		$this->assertEquals(0, $payload->getCode());
		$this->assertNotFalse($pathsGood);
		$this->assertNotEquals($pathsGood, $pathsBad);
		$this->assertDirectoryNotExists($needlessDir);
		$this->assertFileNotExists($needlessFile);
	}

	/**
	 * @covers Deploid\Application::deploidReleaseExist
	 * @depends testDeploidReleaseLatest
	 */
	public function testDeploidReleaseExist(Payload $payloadLatest) {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Application::deploidReleaseCreate
	 * @depends testDeploidStructureInit
	 */
	public function testDeploidReleaseCreate(Payload $payload) {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Application::deploidReleaseRemove
	 * @depends testDeploidReleaseLatest
	 */
	public function testDeploidReleaseRemove(Payload $payload) {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Application::deploidReleaseList
	 * @depends testDeploidReleaseCreate
	 */
	public function testDeploidReleaseList(Payload $payload) {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Application::deploidReleaseLatest
	 * @depends testDeploidReleaseCreate
	 */
	public function testDeploidReleaseLatest(Payload $payload) {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Application::deploidReleaseCurrent
	 * @depends testDeploidReleaseSetup
	 */
	public function testDeploidReleaseCurrent(Payload $payload) {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Application::deploidReleaseSetup
	 * @depends testDeploidReleaseCreate
	 */
	public function testDeploidReleaseSetup(Payload $payload) {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Application::deploidReleaseRotate
	 * @depends testDeploidReleaseCreate
	 */
	public function testDeploidReleaseRotate(Payload $payload) {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Application::absolutePath
	 * @todo   Implement testAbsolutePath().
	 */
	public function testAbsolutePath() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

}