<?php

namespace Deploid;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-10-17 at 21:55:10.
 */
class PayloadTest extends \PHPUnit_Framework_TestCase {

	/**
	 * @var Payload
	 */
	protected $payload;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->payload = new Payload();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @covers Deploid\Payload::getCode
	 * @todo   Implement testGetCode().
	 */
	public function testGetCode() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Payload::getType
	 * @todo   Implement testGetType().
	 */
	public function testGetType() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Payload::getMessage
	 * @todo   Implement testGetMessage().
	 */
	public function testGetMessage() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @covers Deploid\Payload::setCode
	 */
	public function testSetCode() {
		$code = 100;

		$payload = $this->payload->setCode($code);

		$this->assertEquals($code, $payload->getCode());
		$this->assertInstanceOf(Payload::class, $payload);
	}

	/**
	 * @covers Deploid\Payload::setType
	 */
	public function testSetType() {
		$type = 'success';

		$payload = $this->payload->setType($type);

		$this->assertEquals($type, $payload->getType());
		$this->assertInstanceOf(Payload::class, $payload);
	}

	/**
	 * @covers Deploid\Payload::setMessage
	 */
	public function testSetMessage() {
		$message = 'test message';

		$payload = $this->payload->setMessage($message);

		$this->assertEquals($message, $payload->getMessage());
		$this->assertInstanceOf(Payload::class, $payload);
	}

	/**
	 * @covers Deploid\Payload::create
	 */
	public function testCreate() {
		$type = 'type';
		$code = 255;
		$message = 'test message';

		$payload = $this->payload->create($type, $message, $code);

		$this->assertEquals($type, $payload->getType());
		$this->assertEquals($message, $payload->getMessage());
		$this->assertEquals($code, $payload->getCode());
		$this->assertInstanceOf(Payload::class, $payload);
	}

	/**
	 * @covers Deploid\Payload::toArray
	 */
	public function testToArray() {
		$struct = [
			'type' => 'type',
			'message' => 'test message',
			'code' => 255,
		];

		$payload = clone $this->payload;
		$payload->setType($struct['type']);
		$payload->setMessage($struct['message']);
		$payload->setCode($struct['code']);

		$this->assertEquals($struct['type'], $payload->getType());
		$this->assertEquals($struct['message'], $payload->getMessage());
		$this->assertEquals($struct['code'], $payload->getCode());
		$this->assertEquals($struct, $payload->toArray());
	}

}